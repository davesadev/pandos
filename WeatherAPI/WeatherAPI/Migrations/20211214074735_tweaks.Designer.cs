// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherAPI.Models;

#nullable disable

namespace WeatherAPI.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20211214074735_tweaks")]
    partial class tweaks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WeatherAPI.Models.Book", b =>
                {
                    b.Property<string>("BookId")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("BookID")
                        .IsFixedLength();

                    b.Property<string>("Author")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("CheckedOutToId")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("CheckedOutToID")
                        .IsFixedLength();

                    b.Property<string>("Genre")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<byte?>("MultipleCopies")
                        .HasColumnType("tinyint");

                    b.Property<string>("Publisher")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("ReadingLevel")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("WeatherAPI.Models.Genre", b =>
                {
                    b.Property<string>("Genre1")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("Genre")
                        .IsFixedLength();

                    b.HasKey("Genre1");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("WeatherAPI.Models.ReadingLevel", b =>
                {
                    b.Property<string>("ReadingLevel1")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("ReadingLevel")
                        .IsFixedLength();

                    b.HasKey("ReadingLevel1");

                    b.ToTable("ReadingLevel");
                });

            modelBuilder.Entity("WeatherAPI.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("email")
                        .IsFixedLength();

                    b.Property<string>("Password")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("password")
                        .IsFixedLength();

                    b.Property<string>("Username")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("username")
                        .IsFixedLength();

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
